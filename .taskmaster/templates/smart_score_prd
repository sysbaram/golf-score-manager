{% comment %} # overview
[필드 스코어 세부 기록을 위한 웹 애플리케이션으로]
[Google Sheets와 연동하여 스코어를 관리합니다.]

# core features
- google sheet 연동하여 사용자 정보와 세부 스코어 저장/관리
- github pages 호스팅
- github action 통해 배포
- 모바일 및 데스크톱 반응형 디자인

# technical architecture
- backend: python, flask
- frontend: html, css, javascript
- api: google sheets api
- authentication: oauth 2.0
- styling: font awesome, responsive css
- database: google sheets
- hosting: github pages
- deployment: github action
- error tracking: google cloud error reporting
- security: google cloud security



    
# user experience
개인별 로그인 기능
- 코스별 스코어 입력 기능
- 홀별 상세 스코어 입력 기능
- 홀별 Par3, Par4, Par5 선택 기능
- Driver, Wood/Util, Iron, Putter 4가지 항목 선택 기능
- Iron 다중 선택 기능
- 홀별 상세 스코어 자동 계산 기능
- 모바일 및 데스크톱 반응형 디자인 기능
- 세부 스코어는 Google Sheets 연동을 통해 저장/관리합니다.
- 시트 분리 기능(Score 시트, Member 시트)
- 시트별 헤더 관리 기능
- 데이터 구조 기능 {% endcomment %}



# Smart Score PRD (Product Requirements Document)

## 1. 개요
- **제품명**: Golf Score Manager (골프 스코어 관리 시스템)
- **목적**: 골프 플레이어의 스코어를 체계적으로 관리하고 분석하는 웹 애플리케이션
- **대상 사용자**: 골프 플레이어, 골프 코치, 골프 클럽 관리자
- **현재 상태**: MVP 완성, 로컬 서버 및 Render 배포 완료

## 2. 핵심 기능
### 2.1 사용자 관리
- **회원가입**: 사용자명, 이메일, 비밀번호로 계정 생성
- **로그인**: 사용자명 또는 이메일로 로그인
- **세션 관리**: 로그인 상태 유지 및 자동 로그아웃

### 2.2 스코어 관리
- **18홀 상세 스코어 입력**: Par, Driver, Wood, Iron, Putter별 점수 입력
- **스코어 저장**: Google Sheets API 연동 또는 로컬 스토리지
- **스코어 조회**: 저장된 라운드 기록 조회 및 검색
- **스코어 수정/삭제**: 기존 스코어 데이터 관리

### 2.3 데이터 분석
- **개인 통계**: 평균 스코어, 핸디캡 계산
- **라운드 기록**: 날짜별, 코스별 스코어 히스토리, 핸디캡 계산, regular-on, 2put 체크
- **성과 추적**: 스코어 개선 트렌드 분석

## 3. 기술 스택
### 3.1 Frontend
- **HTML5**: 시맨틱 마크업
- **CSS3**: 반응형 디자인, Flexbox/Grid 레이아웃
- **JavaScript (ES6+)**: 모듈화된 클래스 기반 구조
- **Font Awesome**: 아이콘 라이브러리

### 3.2 Backend
- **Python 3.11**: 메인 프로그래밍 언어
- **Flask**: 웹 프레임워크
- **Gunicorn**: WSGI 서버 (프로덕션)

### 3.3 데이터베이스
- **Google Sheets API**: 메인 데이터 저장소
- **로컬 스토리지**: 클라이언트 사이드 임시 저장

### 3.4 인증 및 보안
- **OAuth 2.0**: Google API 인증
- **Flask Sessions**: 서버 사이드 세션 관리
- **bcrypt**: 비밀번호 해시화
- **환경변수**: 민감한 정보 보안 관리

### 3.5 배포 및 호스팅
- **로컬 개발**: Flask 개발 서버
{% comment %} - **Render**: 프로덕션 배포 (PaaS) {% endcomment %}
- **GitHub Pages**: 정적 호스팅
- **Git**: 버전 관리 및 배포

## 4. 사용자 스토리
### 4.1 인증 관련
- **US1**: 사용자는 회원가입을 통해 계정을 생성할 수 있다
- **US2**: 사용자는 사용자명 또는 이메일로 로그인할 수 있다
- **US3**: 사용자는 로그인 상태를 유지할 수 있다
- **US4**: 사용자는 로그아웃할 수 있다

### 4.2 스코어 관리
- **US5**: 사용자는 18홀의 상세 스코어를 입력할 수 있다
- **US6**: 사용자는 Par, Driver, Wood, Iron, Putter별 점수를 입력할 수 있다
- **US7**: 사용자는 Iron 클럽을 여러 개 선택할 수 있다
- **US8**: 사용자는 입력한 스코어를 저장할 수 있다
- **US9**: 사용자는 저장된 스코어를 조회할 수 있다
- **US10**: 사용자는 기존 스코어를 수정하거나 삭제할 수 있다

### 4.3 데이터 분석
- **US11**: 사용자는 개인별 스코어 통계를 확인할 수 있다
- **US12**: 사용자는 라운드 기록을 날짜별로 조회할 수 있다
- **US13**: 사용자는 코스별 성과를 비교할 수 있다

## 5. 화면 구성
### 5.1 로그인 화면
- **모달 형태**: 첫 화면에 로그인 모달 표시
- **입력 필드**: 사용자명/이메일, 비밀번호
- **회원가입 링크**: 회원가입 모달로 전환

### 5.2 회원가입 화면
- **모달 형태**: 로그인 모달에서 전환
- **입력 필드**: 사용자명, 이메일, 비밀번호
- **유효성 검사**: 필수 필드 및 형식 검증

### 5.3 메인 화면
- **헤더**: 사용자 정보 및 로그아웃 버튼
- **탭 네비게이션**: 스코어 입력, 스코어 기록
- **스코어 입력 폼**: 18홀 상세 입력 폼
- **스코어 기록 테이블**: 저장된 라운드 목록

## 6. 데이터 모델
### 6.1 사용자 (User)
```json
{
  "user_id": "string",
  "username": "string",
  "email": "string",
  "password_hash": "string",
  "created_at": "datetime",
  "last_login": "datetime"
}
```

### 6.2 스코어 라운드 (Score Round)
```json
{
  "round_id": "string",
  "user_id": "string",
  "player_name": "string",
  "course_name": "string",
  "date": "date",
  "total_score": "number",
  "handicap": "number",
  "created_at": "datetime"
}
```

### 6.3 홀별 스코어 (Hole Score)
```json
{
  "hole_id": "string",
  "round_id": "string",
  "hole_number": "number",
  "par": "number",
  "driver": "number",
  "wood": "number",
  "irons": "array",
  "putter": "number",
  "total": "number"
}
```

## 7. API 설계
### 7.1 인증 API
- **POST /api/auth/register**: 회원가입
- **POST /api/auth/login**: 로그인
- **POST /api/auth/logout**: 로그아웃
- **GET /api/auth/check**: 로그인 상태 확인
- **GET /api/auth/me**: 현재 사용자 정보

### 7.2 스코어 API
- **GET /api/rounds**: 스코어 라운드 조회
- **POST /api/rounds**: 스코어 라운드 저장
- **PUT /api/rounds/:id**: 스코어 라운드 수정
- **DELETE /api/rounds/:id**: 스코어 라운드 삭제

### 7.3 헬스 체크 API
- **GET /api/health**: 서버 상태 확인

## 8. 보안 요구사항
### 8.1 인증 및 인가
- **세션 기반 인증**: Flask 세션 사용
- **비밀번호 해시화**: bcrypt 알고리즘
- **세션 만료**: 자동 로그아웃 기능

### 8.2 데이터 보안
- **환경변수**: API 키 및 시크릿 관리
- **HTTPS**: 프로덕션 환경에서 SSL/TLS
- **CORS 설정**: 적절한 CORS 정책 적용

### 8.3 입력 검증
- **클라이언트 검증**: JavaScript 유효성 검사
- **서버 검증**: Flask 서버 사이드 검증
- **SQL 인젝션 방지**: 파라미터화된 쿼리 사용

## 9. 성능 요구사항
### 9.1 응답 시간
- **API 응답**: 2초 이내
- **페이지 로드**: 3초 이내
- **데이터베이스 쿼리**: 1초 이내

### 9.2 확장성
- **동시 사용자**: 100명 이상 지원
- **데이터 저장**: Google Sheets API 제한 내 최적화
- **캐싱**: 자주 사용되는 데이터 캐싱

### 9.3 가용성
- **업타임**: 99% 이상
- **백업**: 정기적인 데이터 백업
- **모니터링**: 실시간 오류 추적

## 10. 배포 및 운영
### 10.1 개발 환경
- **로컬 서버**: Flask 개발 서버 (포트 3000)
- **환경변수**: .env 파일 사용
- **데이터베이스**: Google Sheets API

### 10.2 프로덕션 환경
{% comment %} - **Render**: PaaS 배포 {% endcomment %}
{% comment %} - **Gunicorn**: WSGI 서버 {% endcomment %}
{% comment %} - **환경변수**: Render 환경변수 설정{% endcomment %}
- github pages 호스팅   
- **도메인**: https://sysbaram.github.io/golf-score-manager/

### 10.3 모니터링
{% comment %} - **로그 수집**: Flask 로그 시스템
- **오류 추적**: 예외 처리 및 로깅
- **성능 모니터링**: 응답 시간 추적 {% endcomment %}

## 11. 향후 확장 계획
### 11.1 단기 계획 (3개월)
- **모바일 최적화**: 반응형 디자인 개선
- **통계 기능**: 고급 분석 도구 추가
- **데이터 내보내기**: CSV/Excel 내보내기

### 11.2 중기 계획 (6개월)
- **모바일 앱**: React Native 또는 Flutter
- **소셜 기능**: 친구와 스코어 공유
- **알림 시스템**: 이메일/SMS 알림

### 11.3 장기 계획 (1년)
- **AI 분석**: 머신러닝 기반 스코어 예측
- **결제 시스템**: 프리미엄 기능 구독
- **다국어 지원**: 영어, 일본어 등

## 12. 위험 요소 및 대응 방안
### 12.1 기술적 위험
- **위험**: Google Sheets API 제한
- **대응**: 캐싱 및 배치 처리, 대체 데이터베이스 검토
- **위험**: 서버 다운타임
- **대응**: 다중 서버 구성, 로드 밸런싱

### 12.2 보안 위험
- **위험**: 데이터 유출
- **대응**: 정기 보안 점검, 암호화 강화
- **위험**: 무단 접근
- **대응**: 강화된 인증 시스템, 접근 로그 모니터링

### 12.3 비즈니스 위험
- **위험**: 사용자 이탈
- **대응**: 사용자 피드백 수집, 기능 개선
- **위험**: 경쟁사 대응
- **대응**: 차별화된 기능 개발, 사용자 경험 개선

## 13. 성공 지표
### 13.1 사용자 지표
- **월간 활성 사용자 (MAU)**: 100명 이상
- **사용자 유지율**: 70% 이상
- **평균 세션 시간**: 10분 이상

### 13.2 기능 지표
- **스코어 입력 완료율**: 80% 이상
- **API 응답 시간**: 2초 이내
- **시스템 가용성**: 99% 이상

### 13.3 비즈니스 지표
- **사용자 만족도**: 4.0/5.0 이상
- **기능 사용률**: 60% 이상
- **오류 발생률**: 1% 이하