/* Google Sheets API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Ïó∞Îèô - Google Identity Services (GIS) */

class GoogleSheetsAPI {
    constructor() {
        this.isSignedIn = false;
        this.spreadsheetId = '1-8URFWExJVHp-V3bnB-zFtBaxMZUZ5QKvvEVo0CGz10';
        this.usersSheetId = '1-8URFWExJVHp-V3bnB-zFtBaxMZUZ5QKvvEVo0CGz10';
        // Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïú†Ìòï Client ID
        this.clientId = '38824619592-npt5ckpvnqjleo82j7onsrvqi7r39q0h.apps.googleusercontent.com';
        this.scope = 'https://www.googleapis.com/auth/spreadsheets';
        this.discoveryDocs = ['https://sheets.googleapis.com/$discovery/rest?version=v4'];
        
        // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
        this.currentUser = null;
        this.accessToken = null;
        
        // GitHub Pages ÌôòÍ≤Ω Í∞êÏßÄ
        this.isGitHubPages = window.location.hostname === 'sysbaram.github.io' || 
                             window.location.hostname.includes('github.io');
        
        console.log('üåê GoogleSheetsAPI ÌôòÍ≤Ω:', this.isGitHubPages ? 'GitHub Pages' : 'Î°úÏª¨');
        console.log('üîë Client ID:', this.clientId);
    }

    async init() {
        return new Promise((resolve, reject) => {
            console.log('üöÄ Google API Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
            
            try {
                // Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î°úÎî© ÌôïÏù∏ (ÌïÑÏàò)
                if (!window.gapi) {
                    console.error('‚ùå Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                    reject(new Error('Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ±∞ÎÇò ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.'));
                    return;
                }

                // Google Identity Services ÌôïÏù∏ (ÏÑ†ÌÉùÏ†Å)
                const hasGIS = window.google && window.google.accounts && window.google.accounts.oauth2;
                const hasLegacyAuth = window.gapi && window.gapi.auth2;
                
                console.log('üîç Ïù∏Ï¶ù Î∞©Ïãù ÌôïÏù∏:');
                console.log('  - Google Identity Services (GIS):', hasGIS ? '‚úÖ' : '‚ùå');
                console.log('  - Legacy gapi.auth2:', hasLegacyAuth ? '‚úÖ' : '‚ùå');
                
                if (!hasGIS && !hasLegacyAuth) {
                    console.error('‚ùå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïù∏Ï¶ù Î∞©ÏãùÏù¥ ÏóÜÏäµÎãàÎã§.');
                    reject(new Error('Google Ïù∏Ï¶ù ÏãúÏä§ÌÖúÏùÑ Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ±∞ÎÇò ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.'));
                    return;
                }

                console.log('‚úÖ Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î°úÎìú ÏôÑÎ£å');
                
                // Ïù∏Ï¶ù Î∞©Ïãù Í≤∞Ï†ï
                this.useGIS = hasGIS;
                this.useLegacyAuth = !hasGIS && hasLegacyAuth;
                
                if (this.useGIS) {
                    console.log('üéØ Google Identity Services (GIS) Î∞©Ïãù ÏÇ¨Ïö©');
                } else {
                    console.log('üéØ Legacy gapi.auth2 Î∞©Ïãù ÏÇ¨Ïö©');
                }
                
                // Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
                const loadList = this.useLegacyAuth ? ['client', 'auth2'] : ['client'];
                
                window.gapi.load(loadList.join(':'), async () => {
                    try {
                        console.log('üîß Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ï§ë...');
                        
                        const initConfig = {
                            discoveryDocs: this.discoveryDocs,
                        };
                        
                        // Legacy Î∞©ÏãùÏù∏ Í≤ΩÏö∞ clientIdÏôÄ scope Ï∂îÍ∞Ä
                        if (this.useLegacyAuth) {
                            initConfig.clientId = this.clientId;
                            initConfig.scope = this.scope;
                        }
                        
                        await window.gapi.client.init(initConfig);
                        
                        console.log('‚úÖ Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                        
                        // Ïù∏Ï¶ù ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
                        if (this.useGIS) {
                            // GIS Î∞©Ïãù
                            this.tokenClient = window.google.accounts.oauth2.initTokenClient({
                                client_id: this.clientId,
                                scope: this.scope,
                                callback: (response) => {
                                    console.log('üéØ GIS OAuth ÏùëÎãµ:', response);
                                    if (response.access_token) {
                                        this.accessToken = response.access_token;
                                        this.isSignedIn = true;
                                        console.log('‚úÖ GIS OAuth ÌÜ†ÌÅ∞ ÌöçÎìù ÏÑ±Í≥µ');
                                        
                                        // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê ÌÜ†ÌÅ∞ ÏÑ§Ï†ï
                                        window.gapi.client.setToken({
                                            access_token: this.accessToken
                                        });
                                    } else if (response.error) {
                                        console.error('‚ùå GIS OAuth ÌÜ†ÌÅ∞ ÌöçÎìù Ïã§Ìå®:', response.error);
                                    }
                                },
                                error_callback: (error) => {
                                    console.error('‚ùå GIS OAuth Ïò§Î•ò:', error);
                                }
                            });
                            
                            console.log('‚úÖ Google Identity Services ÌÜ†ÌÅ∞ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                        } else if (this.useLegacyAuth) {
                            // Legacy Î∞©Ïãù
                            this.authInstance = window.gapi.auth2.getAuthInstance();
                            console.log('‚úÖ Legacy gapi.auth2 Ïù∏Ïä§ÌÑ¥Ïä§ ÌöçÎìù ÏôÑÎ£å');
                        }
                        
                        console.log('üéâ Google API Ï¥àÍ∏∞Ìôî ÏÑ±Í≥µ!');
                        resolve(true);
                        
                    } catch (error) {
                        console.error('‚ùå Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                        reject(new Error(`Google API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: ${error.message}`));
                    }
                });
                
            } catch (error) {
                console.error('‚ùå Google Identity Services Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                reject(new Error(`Google Identity Services Ï¥àÍ∏∞Ìôî Ïã§Ìå®: ${error.message}`));
            }
        });
    }

    async signIn() {
        return new Promise((resolve, reject) => {
            console.log('üîê Google OAuth Î°úÍ∑∏Ïù∏ ÏãúÏûë...');
            
            // Í∏∞Ï°¥ ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ ÌôïÏù∏
            if (this.accessToken) {
                console.log('‚úÖ Í∏∞Ï°¥ ÌÜ†ÌÅ∞ ÏÇ¨Ïö©');
                resolve(true);
                return;
            }

            if (this.useGIS) {
                // Google Identity Services Î∞©Ïãù
                if (!this.tokenClient) {
                    console.error('‚ùå GIS ÌÜ†ÌÅ∞ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                    reject(new Error('GIS ÌÜ†ÌÅ∞ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'));
                    return;
                }

                // ÌÜ†ÌÅ∞ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏΩúÎ∞± ÏóÖÎç∞Ïù¥Ìä∏
                this.tokenClient.callback = (response) => {
                    console.log('üéØ GIS Î°úÍ∑∏Ïù∏ OAuth ÏùëÎãµ:', response);
                    if (response.access_token) {
                        this.accessToken = response.access_token;
                        this.isSignedIn = true;
                        console.log('‚úÖ GIS Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ');
                        
                        // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê ÌÜ†ÌÅ∞ ÏÑ§Ï†ï
                        window.gapi.client.setToken({
                            access_token: this.accessToken
                        });
                        
                        resolve(true);
                    } else if (response.error) {
                        console.error('‚ùå GIS Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', response.error);
                        reject(new Error(`GIS Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${response.error}`));
                    } else {
                        console.error('‚ùå Ïïå Ïàò ÏóÜÎäî GIS Î°úÍ∑∏Ïù∏ Ïò§Î•ò');
                        reject(new Error('Ïïå Ïàò ÏóÜÎäî GIS Î°úÍ∑∏Ïù∏ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'));
                    }
                };

                // ÌÜ†ÌÅ∞ ÏöîÏ≤≠
                try {
                    console.log('üöÄ GIS OAuth ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Ï§ë...');
                    this.tokenClient.requestAccessToken({
                        prompt: 'consent' // Ìï≠ÏÉÅ ÎèôÏùò ÌôîÎ©¥ ÌëúÏãú
                    });
                } catch (error) {
                    console.error('‚ùå GIS ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Ïã§Ìå®:', error);
                    reject(new Error(`GIS ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Ïã§Ìå®: ${error.message}`));
                }
                
            } else if (this.useLegacyAuth) {
                // Legacy gapi.auth2 Î∞©Ïãù
                if (!this.authInstance) {
                    console.error('‚ùå Legacy auth2 Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                    reject(new Error('Legacy auth2 Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'));
                    return;
                }

                try {
                    console.log('üöÄ Legacy auth2 Î°úÍ∑∏Ïù∏ Ï§ë...');
                    this.authInstance.signIn().then((googleUser) => {
                        console.log('‚úÖ Legacy Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', googleUser);
                        this.isSignedIn = true;
                        
                        // ÌÜ†ÌÅ∞ ÌöçÎìù
                        const authResponse = googleUser.getAuthResponse();
                        this.accessToken = authResponse.access_token;
                        
                        // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïóê ÌÜ†ÌÅ∞ ÏÑ§Ï†ï
                        window.gapi.client.setToken({
                            access_token: this.accessToken
                        });
                        
                        resolve(true);
                    }).catch((error) => {
                        console.error('‚ùå Legacy Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
                        reject(new Error(`Legacy Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${error.error || error.message}`));
                    });
                } catch (error) {
                    console.error('‚ùå Legacy Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', error);
                    reject(new Error(`Legacy Î°úÍ∑∏Ïù∏ Ïò§Î•ò: ${error.message}`));
                }
            } else {
                reject(new Error('ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïù∏Ï¶ù Î∞©ÏãùÏù¥ ÏóÜÏäµÎãàÎã§.'));
            }
        });
    }

    signOut() {
        console.log('üö™ Google OAuth Î°úÍ∑∏ÏïÑÏõÉ...');
        
        if (this.useGIS && this.accessToken) {
            // GIS Î∞©Ïãù - ÌÜ†ÌÅ∞ ÌèêÍ∏∞
            try {
                window.google.accounts.oauth2.revoke(this.accessToken, () => {
                    console.log('‚úÖ GIS ÌÜ†ÌÅ∞ ÌèêÍ∏∞ ÏôÑÎ£å');
                });
            } catch (error) {
                console.log('‚ö†Ô∏è GIS ÌÜ†ÌÅ∞ ÌèêÍ∏∞ Ïã§Ìå® (Î¨¥Ïãú):', error);
            }
        } else if (this.useLegacyAuth && this.authInstance) {
            // Legacy Î∞©Ïãù - Î°úÍ∑∏ÏïÑÏõÉ
            try {
                this.authInstance.signOut();
                console.log('‚úÖ Legacy Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');
            } catch (error) {
                console.log('‚ö†Ô∏è Legacy Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå® (Î¨¥Ïãú):', error);
            }
        }
        
        // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        this.accessToken = null;
        this.isSignedIn = false;
        this.currentUser = null;
        
        // API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌÜ†ÌÅ∞ Ï†úÍ±∞
        if (window.gapi && window.gapi.client) {
            window.gapi.client.setToken(null);
        }
        
        console.log('‚úÖ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');
    }

    isUserSignedIn() {
        return this.isSignedIn && this.accessToken;
    }

    getCurrentUser() {
        return this.currentUser;
    }

    // ÏÇ¨Ïö©Ïûê Îì±Î°ù
    async registerUser(username, email, password) {
        console.log('üìù ÏÇ¨Ïö©Ïûê Îì±Î°ù ÏãúÏûë:', { username, email });
        
        try {
            // Î®ºÏ†Ä Î°úÍ∑∏Ïù∏ ÌôïÏù∏
            if (!this.isUserSignedIn()) {
                console.log('üîê Î°úÍ∑∏Ïù∏ ÌïÑÏöî, ÏûêÎèô Î°úÍ∑∏Ïù∏ ÏãúÎèÑ...');
                await this.signIn();
            }

            // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ÌôïÏù∏
            const existingUsers = await this.getUsers();
            const existingUser = existingUsers.find(user => 
                user.username === username || user.email === email
            );

            if (existingUser) {
                console.log('‚ùå Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©Ïûê');
                return {
                    success: false,
                    error: existingUser.username === username ? 
                        'Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÏÇ¨Ïö©ÏûêÎ™ÖÏûÖÎãàÎã§.' : 
                        'Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.'
                };
            }

            // ÏÉà ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä
            const newUser = {
                username: username,
                email: email,
                password: password, // Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ìï¥ÏãúÌôî ÌïÑÏöî
                created_at: new Date().toISOString()
            };

            console.log('üë§ ÏÉà ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', newUser);

            // Google SheetsÏóê ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä
            const result = await this.appendToSheet('Users', [
                [newUser.username, newUser.email, newUser.password, newUser.created_at]
            ]);

            if (result) {
                console.log('‚úÖ ÏÇ¨Ïö©Ïûê Îì±Î°ù ÏÑ±Í≥µ');
                // Îì±Î°ù ÌõÑ ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÎ°ú ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏùå (Î°úÍ∑∏Ïù∏ Î≥ÑÎèÑ ÌïÑÏöî)
                return {
                    success: true,
                    user: newUser
                };
            } else {
                throw new Error('Google SheetsÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• Ïã§Ìå®');
            }

        } catch (error) {
            console.error('‚ùå ÏÇ¨Ïö©Ïûê Îì±Î°ù Ïã§Ìå®:', error);
            return {
                success: false,
                error: error.message || 'ÏÇ¨Ïö©Ïûê Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            };
        }
    }

    // ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏
    async loginUser(usernameOrEmail, password) {
        console.log('üîê ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏ ÏãúÎèÑ:', usernameOrEmail);
        
        try {
            // Î®ºÏ†Ä Google OAuth Î°úÍ∑∏Ïù∏
            if (!this.isUserSignedIn()) {
                console.log('üîê Google OAuth Î°úÍ∑∏Ïù∏ ÌïÑÏöî...');
                await this.signIn();
            }

            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
            const users = await this.getUsers();
            const user = users.find(u => 
                (u.username === usernameOrEmail || u.email === usernameOrEmail) && 
                u.password === password
            );

            if (user) {
                this.currentUser = user;
                console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', user.username);
                return {
                    success: true,
                    user: user
                };
            } else {
                console.log('‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÏûòÎ™ªÎêú ÏûêÍ≤©Ï¶ùÎ™Ö');
                return {
                    success: false,
                    error: 'ÏÇ¨Ïö©ÏûêÎ™Ö/Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.'
                };
            }

        } catch (error) {
            console.error('‚ùå Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', error);
            return {
                success: false,
                error: error.message || 'Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            };
        }
    }

    // ÏÇ¨Ïö©Ïûê Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    async getUsers() {
        try {
            console.log('üë• ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå Ï§ë...');
            const response = await this.readFromSheet('Users', 'A2:D');
            
            if (!response || !response.length) {
                console.log('üìù ÏÇ¨Ïö©Ïûê ÏóÜÏùå');
                return [];
            }

            const users = response.map(row => ({
                username: row[0] || '',
                email: row[1] || '',
                password: row[2] || '',
                created_at: row[3] || ''
            })).filter(user => user.username); // Îπà Ìñâ Ï†úÏô∏

            console.log(`üë• ÏÇ¨Ïö©Ïûê ${users.length}Î™Ö Ï°∞Ìöå ÏôÑÎ£å`);
            return users;

        } catch (error) {
            console.error('‚ùå ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
            return [];
        }
    }

    // Í≥®ÌîÑ ÎùºÏö¥Îìú Ï†ÄÏû•
    async saveRound(roundData) {
        console.log('‚õ≥ ÎùºÏö¥Îìú Ï†ÄÏû• ÏãúÏûë:', roundData);
        
        try {
            if (!this.currentUser) {
                throw new Error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            }

            const round = {
                username: this.currentUser.username,
                date: roundData.date,
                course: roundData.course,
                total_score: roundData.total_score,
                detailed_scores: JSON.stringify(roundData.detailed_scores),
                created_at: new Date().toISOString()
            };

            // Google SheetsÏóê ÎùºÏö¥Îìú Ï†ÄÏû•
            const result = await this.appendToSheet('Scores', [
                [round.username, round.date, round.course, round.total_score, round.detailed_scores, round.created_at]
            ]);

            if (result) {
                console.log('‚úÖ ÎùºÏö¥Îìú Ï†ÄÏû• ÏÑ±Í≥µ');
                return { success: true, round: round };
            } else {
                throw new Error('Google SheetsÏóê ÎùºÏö¥Îìú Ï†ÄÏû• Ïã§Ìå®');
            }

        } catch (error) {
            console.error('‚ùå ÎùºÏö¥Îìú Ï†ÄÏû• Ïã§Ìå®:', error);
            return {
                success: false,
                error: error.message || 'ÎùºÏö¥Îìú Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            };
        }
    }

    // Í≥®ÌîÑ ÎùºÏö¥Îìú Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    async getRounds() {
        try {
            if (!this.currentUser) {
                throw new Error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            }

            console.log('‚õ≥ ÎùºÏö¥Îìú Î™©Î°ù Ï°∞Ìöå Ï§ë...');
            const response = await this.readFromSheet('Scores', 'A2:F');
            
            if (!response || !response.length) {
                console.log('üìù ÎùºÏö¥Îìú ÏóÜÏùå');
                return [];
            }

            const allRounds = response.map(row => ({
                username: row[0] || '',
                date: row[1] || '',
                course: row[2] || '',
                total_score: parseInt(row[3]) || 0,
                detailed_scores: row[4] ? JSON.parse(row[4]) : [],
                created_at: row[5] || ''
            })).filter(round => round.username); // Îπà Ìñâ Ï†úÏô∏

            // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÎùºÏö¥ÎìúÎßå ÌïÑÌÑ∞ÎßÅ
            const userRounds = allRounds.filter(round => round.username === this.currentUser.username);

            console.log(`‚õ≥ ÎùºÏö¥Îìú ${userRounds.length}Í∞ú Ï°∞Ìöå ÏôÑÎ£å`);
            return userRounds;

        } catch (error) {
            console.error('‚ùå ÎùºÏö¥Îìú Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
            return [];
        }
    }

    // Google SheetsÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞
    async readFromSheet(sheetName, range) {
        try {
            console.log(`üìñ ÏãúÌä∏ ÏùΩÍ∏∞: ${sheetName}!${range}`);
            
            const response = await window.gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: `${sheetName}!${range}`
            });

            console.log('üìñ ÏùΩÍ∏∞ ÏùëÎãµ:', response);
            return response.result.values || [];

        } catch (error) {
            console.error(`‚ùå ÏãúÌä∏ ÏùΩÍ∏∞ Ïã§Ìå® (${sheetName}!${range}):`, error);
            throw error;
        }
    }

    // Google SheetsÏóê Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
    async appendToSheet(sheetName, values) {
        try {
            console.log(`üìù ÏãúÌä∏ Ï∂îÍ∞Ä: ${sheetName}`, values);
            
            const response = await window.gapi.client.sheets.spreadsheets.values.append({
                spreadsheetId: this.spreadsheetId,
                range: `${sheetName}!A:Z`,
                valueInputOption: 'RAW',
                resource: {
                    values: values
                }
            });

            console.log('üìù Ï∂îÍ∞Ä ÏùëÎãµ:', response);
            return response.result;

        } catch (error) {
            console.error(`‚ùå ÏãúÌä∏ Ï∂îÍ∞Ä Ïã§Ìå® (${sheetName}):`, error);
            throw error;
        }
    }
}

// ÌÅ¥ÎûòÏä§Î•º Ï†ÑÏó≠Ïóê ÎÖ∏Ï∂ú
window.GoogleSheetsAPI = GoogleSheetsAPI;

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
window.googleSheetsAPI = new GoogleSheetsAPI();

console.log('‚úÖ GoogleSheetsAPI ÌÅ¥ÎûòÏä§ Î∞è Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ÑÏó≠ ÎÖ∏Ï∂ú ÏôÑÎ£å (GIS Î≤ÑÏ†Ñ)');
console.log('  - window.GoogleSheetsAPI:', typeof window.GoogleSheetsAPI);
console.log('  - window.googleSheetsAPI:', !!window.googleSheetsAPI);